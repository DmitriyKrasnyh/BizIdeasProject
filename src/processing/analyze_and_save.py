import asyncio
from datetime import datetime
from utils.db import (
    fetch_recent_raw_articles,
    fetch_used_parse_ids,
    insert_many
)
from utils.gpt import process_articles_with_gpt

async def analyze_and_save_trending_ideas():
    print("üìä –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ parserresults...")

    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏
    raw_articles = fetch_recent_raw_articles()
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(raw_articles)} —Å—Ç–∞—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π")

    # 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ parse_id
    used_ids = set(fetch_used_parse_ids())

    # 3Ô∏è‚É£ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    new_articles = [
        {
            "title": row["extra_info"],
            "raw_content": row["raw_content"],
            "link": row["raw_content"],
            "source_parse_id": row["parse_id"]
        }
        for row in raw_articles
        if row["parse_id"] not in used_ids
    ]

    print(f"üß† GPT –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å {len(new_articles)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π")

    if not new_articles:
        print("‚úÖ –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ—Ç.")
        return

    # 4Ô∏è‚É£ GPT-–∞–Ω–∞–ª–∏–∑
    enriched = await process_articles_with_gpt(new_articles)

    # 5Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
    to_save = [
        {
            "title": idea["title"],
            "description": idea["summary"],
            "tags": [],  # –º–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–º
            "popularity_score": idea["score"],
            "created_at": datetime.utcnow().isoformat(),
            "updated_at": datetime.utcnow().isoformat(),
            "source_parse_id": idea["source_parse_id"]
        }
        for idea in enriched
        if idea["summary"] and idea["score"] is not None
    ]

    if not to_save:
        print("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç GPT.")
        return

    # 6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º
    insert_many("trendingideas", to_save)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ trendingideas: {len(to_save)} –∏–¥–µ–π.")
